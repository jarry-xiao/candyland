/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category WithdrawFees
 * @category generated
 */
export type WithdrawFeesInstructionArgs = {
  lamportsToWithdraw: beet.bignum
}
/**
 * @category Instructions
 * @category WithdrawFees
 * @category generated
 */
export const withdrawFeesStruct = new beet.BeetArgsStruct<
  WithdrawFeesInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['lamportsToWithdraw', beet.u64],
  ],
  'WithdrawFeesInstructionArgs'
)
/**
 * Accounts required by the _withdrawFees_ instruction
 *
 * @property [_writable_] feePayoutRecipient
 * @property [**signer**] authority
 * @property [_writable_] marketplaceProps
 * @property [] sysvarRent
 * @category Instructions
 * @category WithdrawFees
 * @category generated
 */
export type WithdrawFeesInstructionAccounts = {
  feePayoutRecipient: web3.PublicKey
  authority: web3.PublicKey
  marketplaceProps: web3.PublicKey
  systemProgram?: web3.PublicKey
  sysvarRent: web3.PublicKey
}

export const withdrawFeesInstructionDiscriminator = [
  198, 212, 171, 109, 144, 215, 174, 89,
]

/**
 * Creates a _WithdrawFees_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category WithdrawFees
 * @category generated
 */
export function createWithdrawFeesInstruction(
  accounts: WithdrawFeesInstructionAccounts,
  args: WithdrawFeesInstructionArgs,
  programId = new web3.PublicKey('9T5Xv2cJRydUBqvdK7rLGuNGqhkA8sU8Yq1rGN7hExNK')
) {
  const [data] = withdrawFeesStruct.serialize({
    instructionDiscriminator: withdrawFeesInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.feePayoutRecipient,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.authority,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.marketplaceProps,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.sysvarRent,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
