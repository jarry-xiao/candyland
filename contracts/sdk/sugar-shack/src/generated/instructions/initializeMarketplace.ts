/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'

/**
 * @category Instructions
 * @category InitializeMarketplace
 * @category generated
 */
export type InitializeMarketplaceInstructionArgs = {
  royaltyShare: number
  authority: web3.PublicKey
}
/**
 * @category Instructions
 * @category InitializeMarketplace
 * @category generated
 */
export const initializeMarketplaceStruct = new beet.BeetArgsStruct<
  InitializeMarketplaceInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['royaltyShare', beet.u16],
    ['authority', beetSolana.publicKey],
  ],
  'InitializeMarketplaceInstructionArgs'
)
/**
 * Accounts required by the _initializeMarketplace_ instruction
 *
 * @property [_writable_, **signer**] payer
 * @property [_writable_] marketplaceProps
 * @category Instructions
 * @category InitializeMarketplace
 * @category generated
 */
export type InitializeMarketplaceInstructionAccounts = {
  payer: web3.PublicKey
  marketplaceProps: web3.PublicKey
  systemProgram?: web3.PublicKey
}

export const initializeMarketplaceInstructionDiscriminator = [
  47, 81, 64, 0, 96, 56, 105, 7,
]

/**
 * Creates a _InitializeMarketplace_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category InitializeMarketplace
 * @category generated
 */
export function createInitializeMarketplaceInstruction(
  accounts: InitializeMarketplaceInstructionAccounts,
  args: InitializeMarketplaceInstructionArgs,
  programId = new web3.PublicKey('9T5Xv2cJRydUBqvdK7rLGuNGqhkA8sU8Yq1rGN7hExNK')
) {
  const [data] = initializeMarketplaceStruct.serialize({
    instructionDiscriminator: initializeMarketplaceInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.marketplaceProps,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
