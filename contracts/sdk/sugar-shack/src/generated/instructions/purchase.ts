/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category Purchase
 * @category generated
 */
export type PurchaseInstructionArgs = {
  price: beet.bignum
  dataHash: number[] /* size: 32 */
  nonce: beet.bignum
  index: number
  root: number[] /* size: 32 */
  creatorShares: Uint8Array
}
/**
 * @category Instructions
 * @category Purchase
 * @category generated
 */
export const purchaseStruct = new beet.FixableBeetArgsStruct<
  PurchaseInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['price', beet.u64],
    ['dataHash', beet.uniformFixedSizeArray(beet.u8, 32)],
    ['nonce', beet.u64],
    ['index', beet.u32],
    ['root', beet.uniformFixedSizeArray(beet.u8, 32)],
    ['creatorShares', beet.bytes],
  ],
  'PurchaseInstructionArgs'
)
/**
 * Accounts required by the _purchase_ instruction
 *
 * @property [_writable_] formerOwner
 * @property [_writable_, **signer**] purchaser
 * @property [] listingDelegate
 * @property [] bubblegumAuthority
 * @property [] gummyroll
 * @property [_writable_] merkleSlab
 * @property [] bubblegum
 * @property [_writable_] marketplaceProps
 * @property [] candyWrapper
 * @category Instructions
 * @category Purchase
 * @category generated
 */
export type PurchaseInstructionAccounts = {
  formerOwner: web3.PublicKey
  purchaser: web3.PublicKey
  listingDelegate: web3.PublicKey
  bubblegumAuthority: web3.PublicKey
  gummyroll: web3.PublicKey
  merkleSlab: web3.PublicKey
  bubblegum: web3.PublicKey
  marketplaceProps: web3.PublicKey
  candyWrapper: web3.PublicKey
}

export const purchaseInstructionDiscriminator = [
  21, 93, 113, 154, 193, 160, 242, 168,
]

/**
 * Creates a _Purchase_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category Purchase
 * @category generated
 */
export function createPurchaseInstruction(
  accounts: PurchaseInstructionAccounts,
  args: PurchaseInstructionArgs
) {
  const {
    formerOwner,
    purchaser,
    listingDelegate,
    bubblegumAuthority,
    gummyroll,
    merkleSlab,
    bubblegum,
    marketplaceProps,
    candyWrapper,
  } = accounts

  const [data] = purchaseStruct.serialize({
    instructionDiscriminator: purchaseInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: formerOwner,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: purchaser,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: listingDelegate,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: bubblegumAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: gummyroll,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: merkleSlab,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: bubblegum,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: marketplaceProps,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: candyWrapper,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey(
      '9T5Xv2cJRydUBqvdK7rLGuNGqhkA8sU8Yq1rGN7hExNK'
    ),
    keys,
    data,
  })
  return ix
}
