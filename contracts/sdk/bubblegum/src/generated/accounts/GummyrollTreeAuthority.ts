/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import {
  AppendAllowlistEntry,
  appendAllowlistEntryBeet,
} from '../types/AppendAllowlistEntry'

/**
 * Arguments used to create {@link GummyrollTreeAuthority}
 * @category Accounts
 * @category generated
 */
export type GummyrollTreeAuthorityArgs = {
  treeId: web3.PublicKey
  count: beet.bignum
  owner: web3.PublicKey
  delegate: web3.PublicKey
  appendAllowlist: AppendAllowlistEntry[] /* size: 5 */
}

export const gummyrollTreeAuthorityDiscriminator = [
  248, 252, 210, 189, 229, 120, 109, 225,
]
/**
 * Holds the data for the {@link GummyrollTreeAuthority} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class GummyrollTreeAuthority implements GummyrollTreeAuthorityArgs {
  private constructor(
    readonly treeId: web3.PublicKey,
    readonly count: beet.bignum,
    readonly owner: web3.PublicKey,
    readonly delegate: web3.PublicKey,
    readonly appendAllowlist: AppendAllowlistEntry[] /* size: 5 */
  ) {}

  /**
   * Creates a {@link GummyrollTreeAuthority} instance from the provided args.
   */
  static fromArgs(args: GummyrollTreeAuthorityArgs) {
    return new GummyrollTreeAuthority(
      args.treeId,
      args.count,
      args.owner,
      args.delegate,
      args.appendAllowlist
    )
  }

  /**
   * Deserializes the {@link GummyrollTreeAuthority} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [GummyrollTreeAuthority, number] {
    return GummyrollTreeAuthority.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link GummyrollTreeAuthority} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey
  ): Promise<GummyrollTreeAuthority> {
    const accountInfo = await connection.getAccountInfo(address)
    if (accountInfo == null) {
      throw new Error(
        `Unable to find GummyrollTreeAuthority account at ${address}`
      )
    }
    return GummyrollTreeAuthority.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(
      programId,
      gummyrollTreeAuthorityBeet
    )
  }

  /**
   * Deserializes the {@link GummyrollTreeAuthority} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(
    buf: Buffer,
    offset = 0
  ): [GummyrollTreeAuthority, number] {
    return gummyrollTreeAuthorityBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link GummyrollTreeAuthority} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return gummyrollTreeAuthorityBeet.serialize({
      accountDiscriminator: gummyrollTreeAuthorityDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link GummyrollTreeAuthority}
   */
  static get byteSize() {
    return gummyrollTreeAuthorityBeet.byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link GummyrollTreeAuthority} data from rent
   *
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      GummyrollTreeAuthority.byteSize,
      commitment
    )
  }

  /**
   * Determines if the provided {@link Buffer} has the correct byte size to
   * hold {@link GummyrollTreeAuthority} data.
   */
  static hasCorrectByteSize(buf: Buffer, offset = 0) {
    return buf.byteLength - offset === GummyrollTreeAuthority.byteSize
  }

  /**
   * Returns a readable version of {@link GummyrollTreeAuthority} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      treeId: this.treeId.toBase58(),
      count: (() => {
        const x = <{ toNumber: () => number }>this.count
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      owner: this.owner.toBase58(),
      delegate: this.delegate.toBase58(),
      appendAllowlist: this.appendAllowlist,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const gummyrollTreeAuthorityBeet = new beet.BeetStruct<
  GummyrollTreeAuthority,
  GummyrollTreeAuthorityArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['treeId', beetSolana.publicKey],
    ['count', beet.u64],
    ['owner', beetSolana.publicKey],
    ['delegate', beetSolana.publicKey],
    [
      'appendAllowlist',
      beet.uniformFixedSizeArray(appendAllowlistEntryBeet, 5),
    ],
  ],
  GummyrollTreeAuthority.fromArgs,
  'GummyrollTreeAuthority'
)
