/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category InitializeNonce
 * @category generated
 */
export const initializeNonceStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'InitializeNonceInstructionArgs'
)
/**
 * Accounts required by the _initializeNonce_ instruction
 *
 * @property [_writable_] nonce
 * @property [_writable_, **signer**] payer
 * @category Instructions
 * @category InitializeNonce
 * @category generated
 */
export type InitializeNonceInstructionAccounts = {
  nonce: web3.PublicKey
  payer: web3.PublicKey
}

export const initializeNonceInstructionDiscriminator = [
  64, 206, 214, 231, 20, 15, 231, 41,
]

/**
 * Creates a _InitializeNonce_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category InitializeNonce
 * @category generated
 */
export function createInitializeNonceInstruction(
  accounts: InitializeNonceInstructionAccounts
) {
  const { nonce, payer } = accounts

  const [data] = initializeNonceStruct.serialize({
    instructionDiscriminator: initializeNonceInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: nonce,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey(
      'BGUMzZr2wWfD2yzrXFEWTK2HbdYhqQCP2EZoPEkZBD6o'
    ),
    keys,
    data,
  })
  return ix
}
