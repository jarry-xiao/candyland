/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { Version, versionBeet } from '../types/Version'

/**
 * @category Instructions
 * @category Burn
 * @category generated
 */
export type BurnInstructionArgs = {
  version: Version
  root: number[] /* size: 32 */
  dataHash: number[] /* size: 32 */
  creatorHash: number[] /* size: 32 */
  nonce: beet.bignum
  index: number
}
/**
 * @category Instructions
 * @category Burn
 * @category generated
 */
export const burnStruct = new beet.BeetArgsStruct<
  BurnInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['version', versionBeet],
    ['root', beet.uniformFixedSizeArray(beet.u8, 32)],
    ['dataHash', beet.uniformFixedSizeArray(beet.u8, 32)],
    ['creatorHash', beet.uniformFixedSizeArray(beet.u8, 32)],
    ['nonce', beet.u128],
    ['index', beet.u32],
  ],
  'BurnInstructionArgs'
)
/**
 * Accounts required by the _burn_ instruction
 *
 * @property [] authority
 * @property [] gummyrollProgram
 * @property [] owner
 * @property [] delegate
 * @property [_writable_] merkleSlab
 * @category Instructions
 * @category Burn
 * @category generated
 */
export type BurnInstructionAccounts = {
  authority: web3.PublicKey
  gummyrollProgram: web3.PublicKey
  owner: web3.PublicKey
  delegate: web3.PublicKey
  merkleSlab: web3.PublicKey
}

export const burnInstructionDiscriminator = [116, 110, 29, 56, 107, 219, 42, 93]

/**
 * Creates a _Burn_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category Burn
 * @category generated
 */
export function createBurnInstruction(
  accounts: BurnInstructionAccounts,
  args: BurnInstructionArgs
) {
  const { authority, gummyrollProgram, owner, delegate, merkleSlab } = accounts

  const [data] = burnStruct.serialize({
    instructionDiscriminator: burnInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: authority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: gummyrollProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: owner,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: delegate,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: merkleSlab,
      isWritable: true,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey(
      'BGUMzZr2wWfD2yzrXFEWTK2HbdYhqQCP2EZoPEkZBD6o'
    ),
    keys,
    data,
  })
  return ix
}
