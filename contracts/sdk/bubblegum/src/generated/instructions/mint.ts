/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { Version, versionBeet } from '../types/Version'
import { MetadataArgs, metadataArgsBeet } from '../types/MetadataArgs'

/**
 * @category Instructions
 * @category Mint
 * @category generated
 */
export type MintInstructionArgs = {
  version: Version
  message: MetadataArgs
}
/**
 * @category Instructions
 * @category Mint
 * @category generated
 */
export const mintStruct = new beet.FixableBeetArgsStruct<
  MintInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['version', versionBeet],
    ['message', metadataArgsBeet],
  ],
  'MintInstructionArgs'
)
/**
 * Accounts required by the _mint_ instruction
 *
 * @property [**signer**] mintAuthority
 * @property [] authority
 * @property [_writable_] nonce
 * @property [] gummyrollProgram
 * @property [**signer**] owner
 * @property [] delegate
 * @property [_writable_] merkleSlab
 * @category Instructions
 * @category Mint
 * @category generated
 */
export type MintInstructionAccounts = {
  mintAuthority: web3.PublicKey
  authority: web3.PublicKey
  nonce: web3.PublicKey
  gummyrollProgram: web3.PublicKey
  owner: web3.PublicKey
  delegate: web3.PublicKey
  merkleSlab: web3.PublicKey
}

export const mintInstructionDiscriminator = [
  51, 57, 225, 47, 182, 146, 137, 166,
]

/**
 * Creates a _Mint_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category Mint
 * @category generated
 */
export function createMintInstruction(
  accounts: MintInstructionAccounts,
  args: MintInstructionArgs
) {
  const {
    mintAuthority,
    authority,
    nonce,
    gummyrollProgram,
    owner,
    delegate,
    merkleSlab,
  } = accounts

  const [data] = mintStruct.serialize({
    instructionDiscriminator: mintInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: mintAuthority,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: authority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: nonce,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: gummyrollProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: owner,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: delegate,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: merkleSlab,
      isWritable: true,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey(
      'BGUMzZr2wWfD2yzrXFEWTK2HbdYhqQCP2EZoPEkZBD6o'
    ),
    keys,
    data,
  })
  return ix
}
