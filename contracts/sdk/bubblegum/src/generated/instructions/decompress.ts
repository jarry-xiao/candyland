/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { MetadataArgs, metadataArgsBeet } from '../types/MetadataArgs'

/**
 * @category Instructions
 * @category Decompress
 * @category generated
 */
export type DecompressInstructionArgs = {
  metadata: MetadataArgs
}
/**
 * @category Instructions
 * @category Decompress
 * @category generated
 */
export const decompressStruct = new beet.FixableBeetArgsStruct<
  DecompressInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['metadata', metadataArgsBeet],
  ],
  'DecompressInstructionArgs'
)
/**
 * Accounts required by the _decompress_ instruction
 *
 * @property [_writable_] voucher
 * @property [_writable_, **signer**] owner
 * @property [_writable_] tokenAccount
 * @property [_writable_] mint
 * @property [] mintAuthority
 * @property [_writable_] metadata
 * @property [_writable_] masterEdition
 * @property [] sysvarRent
 * @property [] tokenMetadataProgram
 * @property [] associatedTokenProgram
 * @category Instructions
 * @category Decompress
 * @category generated
 */
export type DecompressInstructionAccounts = {
  voucher: web3.PublicKey
  owner: web3.PublicKey
  tokenAccount: web3.PublicKey
  mint: web3.PublicKey
  mintAuthority: web3.PublicKey
  metadata: web3.PublicKey
  masterEdition: web3.PublicKey
  sysvarRent: web3.PublicKey
  tokenMetadataProgram: web3.PublicKey
  associatedTokenProgram: web3.PublicKey
}

export const decompressInstructionDiscriminator = [
  74, 60, 49, 197, 18, 110, 93, 154,
]

/**
 * Creates a _Decompress_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category Decompress
 * @category generated
 */
export function createDecompressInstruction(
  accounts: DecompressInstructionAccounts,
  args: DecompressInstructionArgs
) {
  const {
    voucher,
    owner,
    tokenAccount,
    mint,
    mintAuthority,
    metadata,
    masterEdition,
    sysvarRent,
    tokenMetadataProgram,
    associatedTokenProgram,
  } = accounts

  const [data] = decompressStruct.serialize({
    instructionDiscriminator: decompressInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: voucher,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: owner,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: tokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: mint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: mintAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: metadata,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: masterEdition,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: sysvarRent,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: tokenMetadataProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: associatedTokenProgram,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey(
      'BGUMzZr2wWfD2yzrXFEWTK2HbdYhqQCP2EZoPEkZBD6o'
    ),
    keys,
    data,
  })
  return ix
}
