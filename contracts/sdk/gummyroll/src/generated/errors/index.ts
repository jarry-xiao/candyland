/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * IncorrectLeafLength: 'Incorrect leaf length. Expected vec of 32 bytes'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectLeafLengthError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'IncorrectLeafLength'
  constructor() {
    super('Incorrect leaf length. Expected vec of 32 bytes')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectLeafLengthError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new IncorrectLeafLengthError())
createErrorFromNameLookup.set(
  'IncorrectLeafLength',
  () => new IncorrectLeafLengthError()
)

/**
 * ConcurrentMerkleTreeError: 'Concurrent merkle tree error'
 *
 * @category Errors
 * @category generated
 */
export class ConcurrentMerkleTreeErrorError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'ConcurrentMerkleTreeError'
  constructor() {
    super('Concurrent merkle tree error')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ConcurrentMerkleTreeErrorError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1771,
  () => new ConcurrentMerkleTreeErrorError()
)
createErrorFromNameLookup.set(
  'ConcurrentMerkleTreeError',
  () => new ConcurrentMerkleTreeErrorError()
)

/**
 * ZeroCopyError: 'Issue zero copying concurrent merkle tree data'
 *
 * @category Errors
 * @category generated
 */
export class ZeroCopyErrorError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'ZeroCopyError'
  constructor() {
    super('Issue zero copying concurrent merkle tree data')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ZeroCopyErrorError)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new ZeroCopyErrorError())
createErrorFromNameLookup.set('ZeroCopyError', () => new ZeroCopyErrorError())

/**
 * MerkleRollConstantsError: 'An unsupported max depth or max buffer size constant was provided'
 *
 * @category Errors
 * @category generated
 */
export class MerkleRollConstantsErrorError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'MerkleRollConstantsError'
  constructor() {
    super('An unsupported max depth or max buffer size constant was provided')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MerkleRollConstantsErrorError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new MerkleRollConstantsErrorError())
createErrorFromNameLookup.set(
  'MerkleRollConstantsError',
  () => new MerkleRollConstantsErrorError()
)

/**
 * CanopyLengthMismatch: 'Expected a different byte length for the merkle roll canopy'
 *
 * @category Errors
 * @category generated
 */
export class CanopyLengthMismatchError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'CanopyLengthMismatch'
  constructor() {
    super('Expected a different byte length for the merkle roll canopy')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CanopyLengthMismatchError)
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new CanopyLengthMismatchError())
createErrorFromNameLookup.set(
  'CanopyLengthMismatch',
  () => new CanopyLengthMismatchError()
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
