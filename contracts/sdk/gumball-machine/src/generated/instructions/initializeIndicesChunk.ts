/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category InitializeIndicesChunk
 * @category generated
 */
export const initializeIndicesChunkStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'InitializeIndicesChunkInstructionArgs'
)
/**
 * Accounts required by the _initializeIndicesChunk_ instruction
 *
 * @property [_writable_] gumballMachine
 * @property [**signer**] authority
 * @category Instructions
 * @category InitializeIndicesChunk
 * @category generated
 */
export type InitializeIndicesChunkInstructionAccounts = {
  gumballMachine: web3.PublicKey
  authority: web3.PublicKey
}

export const initializeIndicesChunkInstructionDiscriminator = [
  210, 175, 246, 93, 245, 32, 2, 1,
]

/**
 * Creates a _InitializeIndicesChunk_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category InitializeIndicesChunk
 * @category generated
 */
export function createInitializeIndicesChunkInstruction(
  accounts: InitializeIndicesChunkInstructionAccounts,
  programId = new web3.PublicKey('GBALLoMcmimUutWvtNdFFGH5oguS7ghUUV6toQPppuTW')
) {
  const [data] = initializeIndicesChunkStruct.serialize({
    instructionDiscriminator: initializeIndicesChunkInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.gumballMachine,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.authority,
      isWritable: false,
      isSigner: true,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
