/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'

/**
 * @category Instructions
 * @category InitializeGumballMachine
 * @category generated
 */
export type InitializeGumballMachineInstructionArgs = {
  maxDepth: number
  maxBufferSize: number
  urlBase: number[] /* size: 64 */
  nameBase: number[] /* size: 32 */
  symbol: number[] /* size: 8 */
  sellerFeeBasisPoints: number
  isMutable: boolean
  retainAuthority: boolean
  price: beet.bignum
  goLiveDate: beet.bignum
  botWallet: web3.PublicKey
  receiver: web3.PublicKey
  authority: web3.PublicKey
  collectionKey: web3.PublicKey
  extensionLen: beet.bignum
  maxMintSize: beet.bignum
  maxItems: beet.bignum
}
/**
 * @category Instructions
 * @category InitializeGumballMachine
 * @category generated
 */
export const initializeGumballMachineStruct = new beet.BeetArgsStruct<
  InitializeGumballMachineInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['maxDepth', beet.u32],
    ['maxBufferSize', beet.u32],
    ['urlBase', beet.uniformFixedSizeArray(beet.u8, 64)],
    ['nameBase', beet.uniformFixedSizeArray(beet.u8, 32)],
    ['symbol', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['sellerFeeBasisPoints', beet.u16],
    ['isMutable', beet.bool],
    ['retainAuthority', beet.bool],
    ['price', beet.u64],
    ['goLiveDate', beet.i64],
    ['botWallet', beetSolana.publicKey],
    ['receiver', beetSolana.publicKey],
    ['authority', beetSolana.publicKey],
    ['collectionKey', beetSolana.publicKey],
    ['extensionLen', beet.u64],
    ['maxMintSize', beet.u64],
    ['maxItems', beet.u64],
  ],
  'InitializeGumballMachineInstructionArgs'
)
/**
 * Accounts required by the _initializeGumballMachine_ instruction
 *
 * @property [_writable_] gumballMachine
 * @property [_writable_, **signer**] creator
 * @property [] mint
 * @property [] willyWonka
 * @property [_writable_] nonce
 * @property [] bubblegumAuthority
 * @property [] gummyroll
 * @property [_writable_] merkleSlab
 * @property [] bubblegum
 * @category Instructions
 * @category InitializeGumballMachine
 * @category generated
 */
export type InitializeGumballMachineInstructionAccounts = {
  gumballMachine: web3.PublicKey
  creator: web3.PublicKey
  mint: web3.PublicKey
  willyWonka: web3.PublicKey
  nonce: web3.PublicKey
  bubblegumAuthority: web3.PublicKey
  gummyroll: web3.PublicKey
  merkleSlab: web3.PublicKey
  bubblegum: web3.PublicKey
}

export const initializeGumballMachineInstructionDiscriminator = [
  206, 247, 43, 231, 98, 153, 124, 110,
]

/**
 * Creates a _InitializeGumballMachine_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category InitializeGumballMachine
 * @category generated
 */
export function createInitializeGumballMachineInstruction(
  accounts: InitializeGumballMachineInstructionAccounts,
  args: InitializeGumballMachineInstructionArgs
) {
  const {
    gumballMachine,
    creator,
    mint,
    willyWonka,
    nonce,
    bubblegumAuthority,
    gummyroll,
    merkleSlab,
    bubblegum,
  } = accounts

  const [data] = initializeGumballMachineStruct.serialize({
    instructionDiscriminator: initializeGumballMachineInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: gumballMachine,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: creator,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: mint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: willyWonka,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: nonce,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: bubblegumAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: gummyroll,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: merkleSlab,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: bubblegum,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey(
      'BRKyVDRGT7SPBtMhjHN4PVSPVYoc3Wa3QTyuRVM4iZkt'
    ),
    keys,
    data,
  })
  return ix
}
